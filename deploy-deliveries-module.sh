#!/bin/bash

# =============================================================================
# SCRIPT DE DESPLIEGUE - M√ìDULO DE REMISIONES
# =============================================================================
# Este script despliega el m√≥dulo de remisiones en AWS con copia de seguridad
# Ejecutar como: bash deploy-deliveries-module.sh
# =============================================================================

set -e  # Salir si hay alg√∫n error

echo "üöÄ Iniciando despliegue del m√≥dulo de remisiones..."
echo "üìÖ Fecha: $(date)"
echo "=============================================="

# Configuraci√≥n
SERVER_IP="34.198.163.51"
SERVER_USER="ubuntu"  # Cambiar si usas otro usuario
BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
LOCAL_FRONTEND_PATH="./inventory-app/frontend/build"
LOCAL_BACKEND_PATH="./inventory-app/backend"

echo "üîß Configuraci√≥n:"
echo "   Servidor: $SERVER_USER@$SERVER_IP"
echo "   Fecha backup: $BACKUP_DATE"
echo ""

# =============================================================================
# PASO 1: VERIFICAR ARCHIVOS LOCALES
# =============================================================================
echo "üìã PASO 1: Verificando archivos locales..."

if [ ! -d "$LOCAL_FRONTEND_PATH" ]; then
    echo "‚ùå Error: No se encontr√≥ el directorio build del frontend"
    echo "   Ejecuta: cd inventory-app/frontend && npm run build"
    exit 1
fi

if [ ! -f "$LOCAL_BACKEND_PATH/scripts/add-deliveries-module.js" ]; then
    echo "‚ùå Error: No se encontr√≥ el script de migraci√≥n"
    exit 1
fi

echo "‚úÖ Archivos locales verificados"

# =============================================================================
# PASO 2: CREAR BACKUP DE LA BASE DE DATOS REMOTA
# =============================================================================
echo ""
echo "üíæ PASO 2: Creando backup de la base de datos..."

ssh $SERVER_USER@$SERVER_IP << 'EOF'
    echo "üîç Verificando estructura del servidor..."
    
    # Buscar la base de datos
    if [ -f "/var/www/inventario-backend/data/inventory.db" ]; then
        DB_PATH="/var/www/inventario-backend/data/inventory.db"
    elif [ -f "/var/www/inventario-backend/inventory.db" ]; then
        DB_PATH="/var/www/inventario-backend/inventory.db"
    else
        echo "‚ùå No se encontr√≥ la base de datos. Ubicaciones buscadas:"
        echo "   - /var/www/inventario-backend/data/inventory.db"
        echo "   - /var/www/inventario-backend/inventory.db"
        echo ""
        echo "üìÇ Contenido actual:"
        ls -la /var/www/inventario-backend/ 2>/dev/null || echo "Directorio no encontrado"
        exit 1
    fi
    
    echo "‚úÖ Base de datos encontrada en: $DB_PATH"
    
    # Crear directorio de backups si no existe
    sudo mkdir -p /var/www/inventario-backend/backups
    
    # Crear backup
    BACKUP_FILE="/var/www/inventario-backend/backups/inventory_backup_$(date +%Y%m%d_%H%M%S)_pre_deliveries.db"
    sudo cp "$DB_PATH" "$BACKUP_FILE"
    
    echo "‚úÖ Backup creado: $BACKUP_FILE"
    
    # Mostrar tama√±o del backup
    echo "üìä Informaci√≥n del backup:"
    sudo ls -lh "$BACKUP_FILE"
    
    # Listar √∫ltimos 3 backups
    echo ""
    echo "üìÇ √öltimos backups disponibles:"
    sudo ls -lt /var/www/inventario-backend/backups/*.db 2>/dev/null | head -3 || echo "No hay backups previos"
EOF

if [ $? -ne 0 ]; then
    echo "‚ùå Error creando backup. Abortando despliegue."
    exit 1
fi

echo "‚úÖ Backup completado exitosamente"

# =============================================================================
# PASO 3: SUBIR FRONTEND
# =============================================================================
echo ""
echo "üåê PASO 3: Subiendo frontend actualizado..."

# Crear archivo temporal con los archivos del build
echo "üì¶ Empaquetando archivos del frontend..."
tar -czf /tmp/frontend-build-$BACKUP_DATE.tar.gz -C "$LOCAL_FRONTEND_PATH" .

# Subir archivo
echo "üì§ Subiendo archivos al servidor..."
scp "/tmp/frontend-build-$BACKUP_DATE.tar.gz" $SERVER_USER@$SERVER_IP:/tmp/

# Desplegar en el servidor
ssh $SERVER_USER@$SERVER_IP << EOF
    echo "üîß Desplegando frontend..."
    
    # Backup del frontend actual
    if [ -d "/var/www/inventario" ]; then
        sudo tar -czf "/tmp/frontend-backup-$BACKUP_DATE.tar.gz" -C "/var/www/inventario" . 2>/dev/null || true
        echo "‚úÖ Backup del frontend actual creado"
    fi
    
    # Crear directorio si no existe
    sudo mkdir -p /var/www/inventario
    
    # Limpiar directorio actual
    sudo rm -rf /var/www/inventario/*
    
    # Extraer nuevos archivos
    cd /var/www/inventario
    sudo tar -xzf "/tmp/frontend-build-$BACKUP_DATE.tar.gz"
    
    # Establecer permisos correctos
    sudo chown -R www-data:www-data /var/www/inventario
    sudo chmod -R 755 /var/www/inventario
    
    echo "‚úÖ Frontend desplegado exitosamente"
    
    # Limpiar archivo temporal
    rm "/tmp/frontend-build-$BACKUP_DATE.tar.gz"
EOF

# Limpiar archivo temporal local
rm "/tmp/frontend-build-$BACKUP_DATE.tar.gz"

echo "‚úÖ Frontend actualizado correctamente"

# =============================================================================
# PASO 4: SUBIR Y EJECUTAR MIGRACI√ìN DE BASE DE DATOS
# =============================================================================
echo ""
echo "üóÑÔ∏è PASO 4: Ejecutando migraci√≥n de base de datos..."

# Subir script de migraci√≥n
echo "üì§ Subiendo script de migraci√≥n..."
scp "$LOCAL_BACKEND_PATH/scripts/add-deliveries-module.js" $SERVER_USER@$SERVER_IP:/tmp/

# Ejecutar migraci√≥n en el servidor
ssh $SERVER_USER@$SERVER_IP << 'EOF'
    echo "üîç Preparando migraci√≥n..."
    
    # Buscar directorio del backend
    if [ -d "/var/www/inventario-backend" ]; then
        BACKEND_PATH="/var/www/inventario-backend"
    else
        echo "‚ùå No se encontr√≥ el directorio del backend"
        exit 1
    fi
    
    echo "‚úÖ Backend encontrado en: $BACKEND_PATH"
    
    # Mover script de migraci√≥n
    sudo mv /tmp/add-deliveries-module.js $BACKEND_PATH/scripts/
    sudo chown ubuntu:ubuntu $BACKEND_PATH/scripts/add-deliveries-module.js
    
    echo "üöÄ Ejecutando migraci√≥n..."
    cd $BACKEND_PATH
    
    # Ejecutar migraci√≥n
    node scripts/add-deliveries-module.js
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Migraci√≥n completada exitosamente"
    else
        echo "‚ùå Error en la migraci√≥n"
        exit 1
    fi
EOF

if [ $? -ne 0 ]; then
    echo "‚ùå Error ejecutando migraci√≥n."
    echo "üí° El backup est√° disponible para restaurar si es necesario."
    exit 1
fi

echo "‚úÖ Migraci√≥n de base de datos completada"

# =============================================================================
# PASO 5: REINICIAR SERVICIOS
# =============================================================================
echo ""
echo "üîÑ PASO 5: Reiniciando servicios..."

ssh $SERVER_USER@$SERVER_IP << 'EOF'
    echo "üîÑ Reiniciando servicios del backend..."
    
    # Intentar diferentes m√©todos de reinicio
    if sudo systemctl list-units --type=service | grep -q inventario; then
        echo "üìã Usando systemctl..."
        sudo systemctl restart inventario-backend || sudo systemctl restart inventario || true
    elif sudo service inventario-backend status >/dev/null 2>&1; then
        echo "üìã Usando service..."
        sudo service inventario-backend restart
    elif pgrep -f "node.*inventory" >/dev/null; then
        echo "üìã Reiniciando proceso Node.js..."
        sudo pkill -f "node.*inventory"
        sleep 2
        # El proceso deber√≠a reiniciarse autom√°ticamente con PM2 o similar
    else
        echo "‚ö†Ô∏è  No se encontr√≥ servicio activo. Intentando iniciar..."
        cd /var/www/inventario-backend && sudo npm start &
    fi
    
    echo "üîÑ Reiniciando Nginx..."
    sudo systemctl reload nginx || sudo systemctl restart nginx
    
    echo "‚úÖ Servicios reiniciados"
EOF

echo "‚úÖ Servicios reiniciados correctamente"

# =============================================================================
# PASO 6: VERIFICAR DESPLIEGUE
# =============================================================================
echo ""
echo "üîç PASO 6: Verificando despliegue..."

# Verificar que el servidor responde
echo "üåê Verificando conectividad..."
if curl -s --max-time 10 "http://$SERVER_IP" >/dev/null; then
    echo "‚úÖ Servidor web responde correctamente"
else
    echo "‚ö†Ô∏è  El servidor web no responde. Verifica manualmente."
fi

# Verificar API si es posible
if curl -s --max-time 10 "http://$SERVER_IP/api/health" >/dev/null; then
    echo "‚úÖ API del backend responde correctamente"
else
    echo "‚ö†Ô∏è  La API no responde. Verifica el backend manualmente."
fi

# =============================================================================
# RESUMEN FINAL
# =============================================================================
echo ""
echo "üéâ DESPLIEGUE COMPLETADO"
echo "========================"
echo "‚úÖ Frontend actualizado con m√≥dulo de remisiones"
echo "‚úÖ Base de datos migrada (backup disponible)"
echo "‚úÖ Servicios reiniciados"
echo ""
echo "üìù PR√ìXIMOS PASOS:"
echo "1. Accede a: http://$SERVER_IP"
echo "2. Inicia sesi√≥n en el sistema"
echo "3. Verifica que aparezca 'Remisiones' en el men√∫ lateral"
echo "4. Prueba crear una nueva remisi√≥n"
echo ""
echo "üõ°Ô∏è INFORMACI√ìN DE BACKUP:"
echo "- Backup de BD: /var/www/inventario-backend/backups/inventory_backup_*_pre_deliveries.db"
echo "- Backup de frontend: /tmp/frontend-backup-$BACKUP_DATE.tar.gz (en servidor)"
echo ""
echo "üö® EN CASO DE PROBLEMAS:"
echo "1. Restaurar BD: sudo cp /var/www/inventario-backend/backups/[ultimo_backup].db [ubicacion_original]"
echo "2. Revisar logs: sudo journalctl -f -u inventario-backend"
echo "3. Reiniciar servicios: sudo systemctl restart inventario-backend nginx"
echo ""
echo "üìû ¬°Despliegue finalizado! El m√≥dulo de remisiones est√° listo para usar."

exit 0